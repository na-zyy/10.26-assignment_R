an_environment<-new.env() #环境的创建用new.env()函数
an_environment

an_environment[["pythag"]]<-c(12,15,18,23)
an_environment$root<-polyroot(c(6,-4,2))

assign(
  "moonday",
  weekdays(as.Date("2020/11/02")),
  an_environment
)

an_environment[["pythag"]]
an_environment$root
get("moonday",an_environment)

ls(envir=an_environment)
ls.str(envir = an_environment)

exists("pythag",an_environment)

(a_list<-as.list(an_environment))
as.environment(a_list)
list2env(a_list)

nested_environment<-new.env(parent=an_environment)
exists("pythag",nested_environment)
exists("pythag",nested_environment,inherits=FALSE)

non_stormers<<-c(2,4,6,8,9,12,13,21)
get("non_stormers",envir = globalenv())
head(ls(envir=baseenv(),20))

hypotenuse<-function(x,y){
  sqrt(x^2+y^2)
}
# 等同于hypotenuse<-function(x,y)sqrt(x^2+y^2)
hypotenuse(3,4)
hypotenuse(x=24,y=7)

hypotenuse<-function(x=5,y=12){
  sqrt(x^2+y^2)
}
hypotenuse()

formals(hypotenuse) #formals函数能取得函数的参数并返回一个成对列表
args(hypotenuse)
formalArgs(hypotenuse)#返回参数名称的字符向量

(body_of_hypoternuse<-body(hypotenuse))
{
  sqrt(x^2+y^2)
}
deparse(body_of_hypoternuse)

normalize<-function(x,m=mean(x),s=sd(x)){
  (x-m)/s
}
normalized<-normalize(c(1,3,6,10,15)) #normalize函数将缩放一个向量
mean(normalized)
sd(normalized)

normalize(c(1,3,6,10,NA))#normalize()函数有一个小问题，如果x的某些元素没有给出

normalize<-function(x,m=mean(x,na.rm=na.rm),s=sd(x,na.rm=na.rm),na.rm=FALSE){
  (x-m)/s
}
normalize(c(1,3,6,10,NA))
normalize(c(1,3,6,10,NA),na.rm=TRUE)

normalize<-function(x,m=mean(x,...),s=sd(x,...),...){
  (x-m)/s
}
normalize(c(1,3,6,10,NA))
normalize(c(1,3,6,10,NA),na.rm=TRUE)

do.call(hypotenuse,list(x=3,y=4))

dfr1<-data.frame(x=1:5,y=rt(5,1))
dfr2<-data.frame(x=6:10,y=rt(5,1,1))
dfr3<-data.frame(x=11:15,y=rbeta(5,1,1))
do.call(rbind,list(dfr1,dfr2,dfr3))

menage<-c(1,0,0,1,2,13,80)
mean(menage)
#简写为
mean(c(1,0,0,1,2,13,80))
x_plus_y<-function(x,y)x+y
do.call(x_plus_y,list(1:5,5:1))
do.call(function(x,y)x+y,list(1:5,5:1))

emp_cun_dist_fn<-ecdf(rnorm(50))
is.function(emp_cun_dist_fn)

f<- function(x9){
  y9<- 1
  g<-function(y9){
    (x9+y9)/2
  }
  g(x9)
}
f(sqrt(5))

h<-function(x10){
  x10*y10
}
y10<-19
h(9)

y11<-19
h2<-function(x11){
  if(runif(1)>0.5)y11<-12
  x11*y11
}
replicate(10,h2(9))


